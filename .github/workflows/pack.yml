name: Build and publish

on:
  push:
    branches:
      - master
    tags:
      - '*'

env:
  PRODUCTION_TRACK: ${{ (github.ref_type == 'branch' && github.ref_name == 'master' && 'staging') || '' }}

jobs:
  push_to_registry:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            pppy/osu-server-beatmap-submission
          # generate Docker tags based on the following events/attributes
          # on tag event: tag using git tag, and as latest if the tag doesn't contain hyphens (pre-releases)
          # on push event: tag using git sha, branch name and as latest-dev
          tags: |
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' && !contains(github.ref_name, '-') }}
            type=raw,value=latest-dev,enable=${{ github.ref_type == 'branch' && github.ref_name == 'master' }}
            type=raw,value=${{ github.ref_name }}
            type=raw,value=${{ github.sha }},enable=${{ github.ref_type == 'branch' }}
          flavor: |
            latest=false
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./osu.Server.BeatmapSubmission
          file: ./osu.Server.BeatmapSubmission/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  trigger_deploy:
    if: ${{ (github.ref_type == 'branch' && github.ref_name == 'master') }}
    runs-on: ubuntu-latest
    needs:
      - push_to_registry
    environment: staging
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          # the "Create Sentry release" step relies on accessing git history
          # to find the SHA of the previous release and set the range of new commits in the release being deployed.
          # do a full clone rather than a shallow one to allow it to do that.
          fetch-depth: 0
      -
        name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.KUBERNETES_CONFIG_REPO_ACCESS_TOKEN }}
          repository: ppy/osu-kubernetes-config
          event-type: dev-ppy-sh-deploy
          client-payload: |-
            ${{ format('{{ "values": {{ "osu-server-beatmap-submission": {{ "image": {{ "tag": "{0}" }} }} }} }}', github.sha) }}
      -
        name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ppy
          SENTRY_PROJECT: osu-server-beatmap-submission
          SENTRY_URL: https://sentry.ppy.sh/
        with:
          environment: ${{ env.PRODUCTION_TRACK }}
          version: osu-server-beatmap-submission@${{ github.ref_type == 'branch' && github.sha }}
